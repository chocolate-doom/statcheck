#!/usr/bin/env python
#
# Copyright(C) 2011 Simon Howard
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
# 02111-1307, USA.
#

# Vanilla Doom processing script.
#
# This script automatically goes through all the zip files in the
# Compet-N tree, extracts them, and then launches Doom running inside
# DOSbox to play back the demo. The game is run through statdump.exe
# and the output recorded to a file. The file is then stored in the
# output/ tree for future reference.

import shutil
import os
from config import *
from common import *

def write_batch_file(path, bat_file, stats_output, exe, lmpname, pwad):

	# Cut off .lmp:
	parts = os.path.basename(lmpname).split(".")
	lmpname = parts[0]

	if pwad is None:
		pwadparm = ""
	else:
		pwadparm = "-file %s" % pwad

	f = open(bat_file, 'w')
	f.write("stuffbuf !\n")
	f.write("statdump.exe -o %s %s %s -nosound -nodraw -timedemo %s\n"
	        % (stats_output, exe, pwadparm, lmpname))
	f.close()

def make_parent_dirs(path):
	if path != "" and not os.path.exists(path):
		make_parent_dirs(os.path.dirname(path))
		os.mkdir(path)

def save_stats(zipfile_path, lmpname, stats_output):

	filename = lmpname.lower().replace(".lmp", ".txt")

	relpath = os.path.relpath(zipfile_path, COMPETN_PATH)
	savepath = os.path.join("output", relpath, filename)

	make_parent_dirs(os.path.dirname(savepath))
	shutil.copy(stats_output, savepath)

def process_lmp(gametype, zipfile_path, zf, lmpname, pwad):

	global output_counter

	gamepath, exe = GAME_PATHS[gametype]

	# Figure out filenames:

	stats_output = os.path.join(gamepath, "OUT%i.TXT" % output_counter)
	lmpname2 = os.path.join(gamepath, "tst%i.lmp" % output_counter)
	bat_file = os.path.join(gamepath, "run%i.bat" % output_counter)

	output_counter += 1

	# Extract lmp:

	zf.extract(lmpname, gamepath)
	os.rename(os.path.join(gamepath, lmpname), lmpname2)

	write_batch_file(gamepath, bat_file, os.path.basename(stats_output),
	                 exe, lmpname2, pwad)

	def process_complete(exit_code, stdout, stderr):
		save_stats(zipfile_path, lmpname, stats_output)

		os.remove(lmpname2)
		os.remove(bat_file)
		os.remove(stats_output)

		relpath = os.path.relpath(zipfile_path, COMPETN_PATH)
		print "%-50s%-15s" % (relpath, lmpname)
		sys.stdout.flush()

	pipeline.call("%s -exit %s" % (DOSBOX, bat_file), process_complete)

output_counter = 0

pipeline = CommandPipeline(CONCURRENT_PROCESSES)

process_all_zips(COMPETN_PATH, process_lmp)

pipeline.finish()

